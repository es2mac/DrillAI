// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: DrillGameRecord.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Drillai_GameRecord {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var garbageSeed: UInt64 = 0

  public var pieceSeed: UInt64 = 0

  /// as piece codes
  public var playedPieces: [UInt32] = []

  public var steps: [Drillai_GameRecord.RecordStep] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct RecordStep {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// 10 x 20 = 200
    public var fieldCells: [Bool] = []

    /// 2 playable + 4~5 previews
    public var tetrominos: [UInt32] = []

    /// special coding in 10 x 20 x (4 x 2)
    public var actions: [UInt32] = []

    /// root's child Ns normalized
    public var priors: [Float] = []

    /// # clears-per-piece in 14 moves
    public var value: Float = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "drillai"

extension Drillai_GameRecord: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GameRecord"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "garbageSeed"),
    2: .same(proto: "pieceSeed"),
    3: .same(proto: "playedPieces"),
    4: .same(proto: "steps"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFixed64Field(value: &self.garbageSeed) }()
      case 2: try { try decoder.decodeSingularFixed64Field(value: &self.pieceSeed) }()
      case 3: try { try decoder.decodeRepeatedFixed32Field(value: &self.playedPieces) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.steps) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.garbageSeed != 0 {
      try visitor.visitSingularFixed64Field(value: self.garbageSeed, fieldNumber: 1)
    }
    if self.pieceSeed != 0 {
      try visitor.visitSingularFixed64Field(value: self.pieceSeed, fieldNumber: 2)
    }
    if !self.playedPieces.isEmpty {
      try visitor.visitPackedFixed32Field(value: self.playedPieces, fieldNumber: 3)
    }
    if !self.steps.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.steps, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Drillai_GameRecord, rhs: Drillai_GameRecord) -> Bool {
    if lhs.garbageSeed != rhs.garbageSeed {return false}
    if lhs.pieceSeed != rhs.pieceSeed {return false}
    if lhs.playedPieces != rhs.playedPieces {return false}
    if lhs.steps != rhs.steps {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Drillai_GameRecord.RecordStep: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Drillai_GameRecord.protoMessageName + ".RecordStep"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "fieldCells"),
    2: .same(proto: "tetrominos"),
    3: .same(proto: "actions"),
    4: .same(proto: "priors"),
    5: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedBoolField(value: &self.fieldCells) }()
      case 2: try { try decoder.decodeRepeatedFixed32Field(value: &self.tetrominos) }()
      case 3: try { try decoder.decodeRepeatedFixed32Field(value: &self.actions) }()
      case 4: try { try decoder.decodeRepeatedFloatField(value: &self.priors) }()
      case 5: try { try decoder.decodeSingularFloatField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.fieldCells.isEmpty {
      try visitor.visitPackedBoolField(value: self.fieldCells, fieldNumber: 1)
    }
    if !self.tetrominos.isEmpty {
      try visitor.visitPackedFixed32Field(value: self.tetrominos, fieldNumber: 2)
    }
    if !self.actions.isEmpty {
      try visitor.visitPackedFixed32Field(value: self.actions, fieldNumber: 3)
    }
    if !self.priors.isEmpty {
      try visitor.visitPackedFloatField(value: self.priors, fieldNumber: 4)
    }
    if self.value != 0 {
      try visitor.visitSingularFloatField(value: self.value, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Drillai_GameRecord.RecordStep, rhs: Drillai_GameRecord.RecordStep) -> Bool {
    if lhs.fieldCells != rhs.fieldCells {return false}
    if lhs.tetrominos != rhs.tetrominos {return false}
    if lhs.actions != rhs.actions {return false}
    if lhs.priors != rhs.priors {return false}
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
